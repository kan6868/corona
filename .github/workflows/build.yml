name: Daily Build

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      buildNumber:
        description: "Build Number"
        required: true
        default: "9999"
      buildYear:
        description: "Build Year"
        required: true
        default: "2100"

env:
  WORKSPACE: ${{ github.workspace }}
  DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer
  BUILD_NUMBER: ${{ github.event.inputs.buildNumber }}
  YEAR: ${{ github.event.inputs.buildYear }}

jobs:
  source-code:
    name: Check out and process source code
    runs-on: macos-13
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: ./tools/GHAction/daily_env.sh
      - name: Set daily build
        run: ./tools/GHAction/process_sources.sh
      - name: Upload Source bundle
        uses: actions/upload-artifact@v4
        with:
          name: SourceCode
          path: ./output

  native:
    needs: source-code
    runs-on: macos-15
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get processed code
        uses: actions/download-artifact@v4
        with:
          name: SourceCode
          path: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Build Native
        run: JAVA_HOME="${JAVA_HOME_17_X64:-$JAVA_HOME_17_arm64}" ./tools/GHAction/build_native.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Upload Corona Native
        uses: actions/upload-artifact@v4
        with:
          name: Native
          path: ./output

  webtemplate:
    needs:
      - source-code
    runs-on: macos-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Set up emsdk
        run: |
          wget -q --header='Accept:application/octet-stream' https://github.com/coronalabs/emsdk/releases/download/e2.0.34/emsdk.tar.xz -O emsdk.tar.xz
          tar -xjf emsdk.tar.xz -C ~/
          xattr -r -d com.apple.quarantine ~/emsdk || true
      - name: Get processed code
        uses: actions/download-artifact@v4
        with:
          name: SourceCode
          path: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Build webtemplate
        working-directory: ./platform/emscripten/gmake
        run: |
          source ~/emsdk/emsdk_env.sh
          ./build_template.sh
      - name: Copy result to output
        run: |
          mkdir -p output
          cp -v platform/emscripten/webtemplate.zip output
      - name: Upload webtemplate artifact
        uses: actions/upload-artifact@v4
        with:
          name: Webtemplate
          path: ./output

  linux:
    needs:
      - source-code
      - native
      - webtemplate
    runs-on: ubuntu-20.04
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get Webtemplate
        uses: actions/download-artifact@v4
        with:
          name: Webtemplate
          path: Webtemplate
      - name: Get Native
        uses: actions/download-artifact@v4
        with:
          name: Native
          path: Native
      - name: Get processed code
        uses: actions/download-artifact@v4
        with:
          name: SourceCode
          path: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - run: mkdir docs
      - name: Get Sample Code
        uses: actions/checkout@v4
        with:
          repository: coronalabs/samples-coronasdk
          path: docs/SampleCode
      - name: Run build script
        run: platform/linux/gh_action.sh
      - name: Upload Linux-Template
        uses: actions/upload-artifact@v4
        with:
          name: Linux-Template
          path: ./output/linuxtemplate_x64.tgz
      - name: Upload snap
        uses: actions/upload-artifact@v4
        with:
          name: Snap
          path: ./output/*.snap

  Windows-Simulator:
    needs:
      - source-code
      - native
      - webtemplate
      - linux
    runs-on: windows-2019
    steps:
      - name: Get processed code
        uses: actions/download-artifact@v4
        with:
          name: SourceCode
          path: SourceCode
      - name: Unpack source code
        run: |
          7z x SourceCode/corona.tgz
          7z x corona.tar
      - run: ./tools/GHAction/daily_env.sh
        shell: bash
      - run: mkdir -f docs
      - name: Get Sample Code
        uses: actions/checkout@v4
        with:
          repository: coronalabs/samples-coronasdk
          path: docs/SampleCode
      - name: Clean-up docs
        run: rm -rf docs/SampleCode/.git docs/SampleCode/.gitignore
        shell: bash
      - name: Move docs outside the directory
        run: mv docs ../docs
      - name: Get Webtemplate
        uses: actions/download-artifact@v4
        with:
          name: Webtemplate
          path: Webtemplate
      - name: Put webtemplate in place
        run: cp -v Webtemplate/webtemplate.zip platform/resources/
        shell: bash
      - name: Get NX Template
        shell: bash
        run: |
          curl -sL https://github.com/coronalabs/binary-data/releases/download/1.0/nxtemplate > platform/resources/nxtemplate
      - name: Get Linux template
        uses: actions/download-artifact@v4
        with:
          name: Linux-Template
          path: Linux-Template
      - name: Put webtemplate in place
        run: |
          cp -v Linux-Template/linuxtemplate_x64.tgz platform/resources/
        shell: bash
      - name: Get Corona Native
        uses: actions/download-artifact@v4
        with:
          name: Native
          path: Native
      - name: Put native in place
        shell: cmd
        run: |
          mkdir "%WORKSPACE%\platform\windows\Bin"
          cd "%WORKSPACE%\platform\windows\Bin"
          rmdir /s /q "Native"
          tar -xvzf "%WORKSPACE%\Native\CoronaNative.tar.gz"
          rm ._CoronaEnterprise
          mv CoronaEnterprise Native
          del /q /f Native\.*
          del /q /f Native\Icon?
          del /q /f /s Native\Corona\tvos\frameworks\CoronaCards.framework
      - name: Put JRE in place
        shell: bash
        run: |
          curl -sL https://github.com/coronalabs/binary-data/releases/download/1.0/jre.win32.7z -o jre.win32.7z
          7z x jre.win32.7z -o"platform/windows/Bin" -y
      - name: Put redistributables in place
        shell: bash
        run: |
          curl -sL https://github.com/coronalabs/binary-data/releases/download/1.0/redist.win32.7z -o redist.win32.7z
          7z x redist.win32.7z -o"platform/windows/Bin/redist" -y
      - name: Install Codesigning Tools
        shell: cmd
        run: |
          choco install dotnet-8.0-runtime --no-progress
          nuget install Microsoft.Windows.SDK.BuildTools -Version 10.0.22621.3233 -x
          nuget install Microsoft.Trusted.Signing.Client -Version 1.0.53 -x
      - name: Build Corona Simulator
        shell: cmd
        run: |
          cd platform\windows
          call UpdateFileVersions.bat %BUILD_NUMBER%
          call Build.Tools\VSVars.bat
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          devenv "Corona.SDK.sln" /rebuild "Release|x86"
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      - name: Copy Simulator
        run: |
          mkdir output
          cp -v ./platform/windows/Bin/Corona.SDK.Installer/Corona.msi output/Corona-$BUILD.msi
        shell: bash
      - name: Upload Widnows Corona artifact
        uses: actions/upload-artifact@v4
        with:
          name: Simulator-Windows
          path: ./output
